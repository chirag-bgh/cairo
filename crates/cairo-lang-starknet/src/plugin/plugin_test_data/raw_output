//! > Test expansion of a simple starknet contract.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    use array::ArrayTrait;

    #[starknet::storage]
    struct Storage {}

    #[external]
    #[raw_output]
    fn test_raw_output(ref self: Storage) -> Span::<felt252> {
        Default::<Array<felt252>>::default().span()
    }

    #[external]
    #[raw_output]
    fn test_raw_output_with_spaces(ref self: Storage) -> Span     ::   < felt252  > {
        Default::<Array<felt252>>::default().span()
    }
}

//! > generated_cairo_code
lib.cairo:

#[contract]
mod TestContract {
    use array::ArrayTrait;

    #[starknet::storage]
    struct Storage {}

    #[external]
    #[raw_output]
    fn test_raw_output(ref self: Storage) -> Span::<felt252> {
        Default::<Array<felt252>>::default().span()
    }

    #[external]
    #[raw_output]
    fn test_raw_output_with_spaces(ref self: Storage) -> Span     ::   < felt252  > {
        Default::<Array<felt252>>::default().span()
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 1348838999098828658181850123465309163350231483164418541983960453285793899585;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }





trait __abi<Storage> {
    #[external]
        fn test_raw_output(ref self: Storage) -> Span::<felt252>;
        #[external]
        fn test_raw_output_with_spaces(ref self: Storage) -> Span     ::   < felt252  >;
        
    
}

mod __external {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn test_raw_output(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::test_raw_output(ref storage, )
        }
        #[implicit_precedence(Pedersen, RangeCheck, Bitwise, EcOp, Poseidon, SegmentArena, GasBuiltin, System)]
        fn test_raw_output_with_spaces(mut data: Span::<felt252>) -> Span::<felt252> {
            internal::revoke_ap_tracking();
            gas::withdraw_gas().expect('Out of gas');
            
            if !array::SpanTrait::is_empty(data) {
                // Force the inclusion of `System` in the list of implicits.
                starknet::use_system_implicit();

                let mut err_data = array::array_new();
                array::array_append(ref err_data, 'Input too long for arguments');
                panic(err_data);
            }
            gas::withdraw_gas_all(get_builtin_costs()).expect('Out of gas');
            let mut storage = super::unsafe_new_storage();
            super::test_raw_output_with_spaces(ref storage, )
        }
        
}

mod __l1_handler {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use super::ArrayTrait;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> lib.cairo:26:34
        Option::Some(*serialized.pop_front()? != 0)
                                 ^*******^

error: Desnap operator can only be applied on snapshots
 --> lib.cairo:26:22
        Option::Some(*serialized.pop_front()? != 0)
                     ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> lib.cairo:103:34
        Option::Some(*serialized.pop_front()?)
                                 ^*******^

error: Desnap operator can only be applied on snapshots
 --> lib.cairo:103:22
        Option::Some(*serialized.pop_front()?)
                     ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> option.cairo:20:35
        let variant = *serialized.pop_front()?;
                                  ^*******^

error: Desnap operator can only be applied on snapshots
 --> option.cairo:20:23
        let variant = *serialized.pop_front()?;
                      ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:21:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:21:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:288:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:288:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u8>` has multiple implementations, in: "core::integer::U32TryIntoU8", "core::integer::Felt252TryIntoU8", "core::integer::U16TryIntoU8", "core::integer::U128TryIntoU8", "core::integer::U64TryIntoU8"
 --> integer.cairo:288:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:463:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:463:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u16>` has multiple implementations, in: "core::integer::U128TryIntoU16", "core::integer::U64TryIntoU16", "core::integer::U32TryIntoU16", "core::integer::Felt252TryIntoU16"
 --> integer.cairo:463:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:639:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:639:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u32>` has multiple implementations, in: "core::integer::U64TryIntoU32", "core::integer::Felt252TryIntoU32", "core::integer::U128TryIntoU32"
 --> integer.cairo:639:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:815:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:815:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u64>` has multiple implementations, in: "core::integer::Felt252TryIntoU64", "core::integer::U128TryIntoU64"
 --> integer.cairo:815:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^
