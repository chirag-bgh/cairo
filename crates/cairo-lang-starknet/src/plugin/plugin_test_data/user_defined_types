//! > Test expansion of Starknet for user types.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        var: WrappedFelt252,
        mapping: LegacyMap::<WrappedFelt252, WrappedFelt252>,
    }
    #[derive(Drop)]
    struct WrappedFelt252 {
        value: felt252,
    }
    use array::ArrayTrait;
    use array::SpanTrait;

    impl WrappedFelt252Serde of serde::Serde::<WrappedFelt252> {
        fn serialize(self: @WrappedFelt252, ref output: Array::<felt252>) {
            output.append(*self.value);
        }
        fn deserialize(ref serialized: Span::<felt252>) -> Option::<WrappedFelt252> {
            Option::<WrappedFelt252>::Some(WrappedFelt252 { value: *serialized.pop_front()? })
        }
    }
    impl WrappedFelt252StorageAccess of starknet::StorageAccess::<WrappedFelt252> {
        fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult::<WrappedFelt252> {
            starknet::SyscallResult::<WrappedFelt252>::Ok(WrappedFelt252 {
                value: starknet::StorageAccess::read(address_domain, base)?
            })
        }
        #[inline(always)]
        fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: WrappedFelt252) -> starknet::SyscallResult::<()> {
            starknet::StorageAccess::write(address_domain, base, value.value)
        }
        fn read_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<WrappedFelt252> {
            WrappedFelt252StorageAccess::read_at_offset_internal(address_domain, base, offset)
        }
        fn write_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: WrappedFelt252) -> starknet::SyscallResult<()> {
            WrappedFelt252StorageAccess::write_at_offset_internal(address_domain, base, offset, value)
        }
        fn size_internal(value: WrappedFelt252) -> u8 {
            1_u8
        }
    }
    impl WrappedFelt252LegacyHash of hash::LegacyHash::<WrappedFelt252> {
        #[inline(always)]
        fn hash(state: felt252, value: WrappedFelt252) -> felt252 {
            hash::LegacyHash::hash(state, value.value)
        }
    }
}

//! > generated_cairo_code
lib.cairo:

#[contract]
mod TestContract {
    #[starknet::storage]
    struct Storage {
        var: WrappedFelt252,
        mapping: LegacyMap::<WrappedFelt252, WrappedFelt252>,
    }
    #[derive(Drop)]
    struct WrappedFelt252 {
        value: felt252,
    }
    use array::ArrayTrait;
    use array::SpanTrait;

    impl WrappedFelt252Serde of serde::Serde::<WrappedFelt252> {
        fn serialize(self: @WrappedFelt252, ref output: Array::<felt252>) {
            output.append(*self.value);
        }
        fn deserialize(ref serialized: Span::<felt252>) -> Option::<WrappedFelt252> {
            Option::<WrappedFelt252>::Some(WrappedFelt252 { value: *serialized.pop_front()? })
        }
    }
    impl WrappedFelt252StorageAccess of starknet::StorageAccess::<WrappedFelt252> {
        fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult::<WrappedFelt252> {
            starknet::SyscallResult::<WrappedFelt252>::Ok(WrappedFelt252 {
                value: starknet::StorageAccess::read(address_domain, base)?
            })
        }
        #[inline(always)]
        fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: WrappedFelt252) -> starknet::SyscallResult::<()> {
            starknet::StorageAccess::write(address_domain, base, value.value)
        }
        fn read_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<WrappedFelt252> {
            WrappedFelt252StorageAccess::read_at_offset_internal(address_domain, base, offset)
        }
        fn write_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: WrappedFelt252) -> starknet::SyscallResult<()> {
            WrappedFelt252StorageAccess::write_at_offset_internal(address_domain, base, offset, value)
        }
        fn size_internal(value: WrappedFelt252) -> u8 {
            1_u8
        }
    }
    impl WrappedFelt252LegacyHash of hash::LegacyHash::<WrappedFelt252> {
        #[inline(always)]
        fn hash(state: felt252, value: WrappedFelt252) -> felt252 {
            hash::LegacyHash::hash(state, value.value)
        }
    }
}

contract:

use starknet::SyscallResultTrait;
use starknet::SyscallResultTraitImpl;

const TEST_CLASS_HASH: felt252 = 397597328817999315073022137045029190287452203299413040163585653610674161093;
use starknet::event::EventEmitter;
#[derive(Drop)]
    struct Storage {
        var: var::Storage,
        mapping: mapping::Storage,
    }
    #[inline(always)]
    fn unsafe_new_storage() -> Storage {
        Storage {
            var: var::Storage{},
            mapping: mapping::Storage{},
        }
    }
    
    #[derive(Drop, starknet::Event)] struct Event {}

    impl StorageEventEmitter of EventEmitter<Storage, Event> {
        fn emit(ref self: Storage, event: Event) {
            let mut keys = Default::<array::Array>::default();
            let mut values = Default::<array::Array>::default();
            starknet::Event::append_keys_and_values(@event, ref keys, ref values);
            starknet::syscalls::emit_event_syscall(
                array::ArrayTrait::span(@keys),
                array::ArrayTrait::span(@values),
            ).unwrap_syscall()
        }
    }

    use var::InternalStorageTrait as varStorageTrait;
    mod var {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct Storage {}
        trait InternalStorageTrait {
            fn address(self: @Storage) -> starknet::StorageBaseAddress;
            fn read(self: @Storage) -> WrappedFelt252;
            fn write(ref self: Storage, value: WrappedFelt252);
        }

        impl InternalStorageImpl of InternalStorageTrait {
            fn address(self: @Storage) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_const::<0x1c1c14d56e959d57ab94facd0d6c86740ac46c453bf9107bba1c735d7783c71>()
            }
            fn read(self: @Storage) -> WrappedFelt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<WrappedFelt252>::read(
                    address_domain,
                    self.address(),
                ).unwrap_syscall()
            }
            fn write(ref self: Storage, value: WrappedFelt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<WrappedFelt252>::write(
                    address_domain,
                    self.address(),
                    value,
                ).unwrap_syscall()
            }
        }
    }
    use mapping::InternalStorageTrait as mappingStorageTrait;
    mod mapping {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;
        use starknet::SyscallResultTrait;
        use starknet::SyscallResultTraitImpl;
        use super;

        #[derive(Copy, Drop)]
        struct Storage {}
        trait InternalStorageTrait {
            fn address(self: @Storage, key: WrappedFelt252) -> starknet::StorageBaseAddress;
            fn read(self: @Storage, key: WrappedFelt252) -> WrappedFelt252;
            fn write(ref self: Storage, key: WrappedFelt252, value: WrappedFelt252);
        }

        impl InternalStorageImpl of InternalStorageTrait {
            fn address(self: @Storage, key: WrappedFelt252) -> starknet::StorageBaseAddress {
                starknet::storage_base_address_from_felt252(
                    hash::LegacyHash::<WrappedFelt252>::hash(0x3043534c8400cf510f61f13082bd823461a59a867690d0148bae4bfcbdb1a4, key))
            }
            fn read(self: @Storage, key: WrappedFelt252) -> WrappedFelt252 {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<WrappedFelt252>::read(
                    address_domain,
                    self.address(key),
                ).unwrap_syscall()
            }
            fn write(ref self: Storage, key: WrappedFelt252, value: WrappedFelt252) {
                // Only address_domain 0 is currently supported.
                let address_domain = 0_u32;
                starknet::StorageAccess::<WrappedFelt252>::write(
                    address_domain,
                    self.address(key),
                    value,
                ).unwrap_syscall()
            }
        }
    }




trait __abi<Storage> {
    
    
}

mod __external {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __l1_handler {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}

mod __constructor {
        use super::WrappedFelt252;
        use super::ArrayTrait;
        use super::SpanTrait;
        use super::WrappedFelt252Serde;
        use super::WrappedFelt252StorageAccess;
        use super::WrappedFelt252LegacyHash;
        use starknet::class_hash::ClassHashSerde;
        use starknet::contract_address::ContractAddressSerde;
        use starknet::storage_access::StorageAddressSerde;
        use option::OptionTrait;
        use option::OptionTraitImpl;

    
}


impls:

impl WrappedFelt252Drop<> of Drop::<WrappedFelt252<>>;


impls:

impl StorageDrop<> of Drop::<Storage<>>;


impls:

impl EventDrop<> of Drop::<Event<>>;


event_impl:

impl EventIsEvent of starknet::Event<Event> {
    fn append_keys_and_values(
        self: @Event, ref keys: Array<felt252>, ref values: Array<felt252>
    ) {
    }
    fn deserialize(
        ref keys: Span<felt252>, ref values: Span<felt252>,
    ) -> Option<Event> {
        Option::Some(Event {})
    }
}

//! > expected_diagnostics
error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> lib.cairo:26:34
        Option::Some(*serialized.pop_front()? != 0)
                                 ^*******^

error: Desnap operator can only be applied on snapshots
 --> lib.cairo:26:22
        Option::Some(*serialized.pop_front()? != 0)
                     ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> lib.cairo:103:34
        Option::Some(*serialized.pop_front()?)
                                 ^*******^

error: Desnap operator can only be applied on snapshots
 --> lib.cairo:103:22
        Option::Some(*serialized.pop_front()?)
                     ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> option.cairo:20:35
        let variant = *serialized.pop_front()?;
                                  ^*******^

error: Desnap operator can only be applied on snapshots
 --> option.cairo:20:23
        let variant = *serialized.pop_front()?;
                      ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:21:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:21:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:288:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:288:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u8>` has multiple implementations, in: "core::integer::U32TryIntoU8", "core::integer::Felt252TryIntoU8", "core::integer::U16TryIntoU8", "core::integer::U128TryIntoU8", "core::integer::U64TryIntoU8"
 --> integer.cairo:288:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:463:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:463:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u16>` has multiple implementations, in: "core::integer::U128TryIntoU16", "core::integer::U64TryIntoU16", "core::integer::U32TryIntoU16", "core::integer::Felt252TryIntoU16"
 --> integer.cairo:463:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:639:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:639:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u32>` has multiple implementations, in: "core::integer::U64TryIntoU32", "core::integer::Felt252TryIntoU32", "core::integer::U128TryIntoU32"
 --> integer.cairo:639:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:815:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:815:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u64>` has multiple implementations, in: "core::integer::Felt252TryIntoU64", "core::integer::U128TryIntoU64"
 --> integer.cairo:815:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^
