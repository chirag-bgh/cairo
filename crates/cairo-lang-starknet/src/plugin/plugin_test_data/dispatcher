//! > Test expansion of a dispatcher.

//! > test_runner_name
ExpandContractTestRunner

//! > cairo_code
#[starknet::interface]
trait IContract<T> {
    fn get_something(ref self: T, arg: felt252, num: felt252) -> felt252;

    fn empty(self: @T);

    fn bad_sig(ref self: T, ref arg1: felt252, ref arg2: felt252) -> felt252;

    fn bad_sig2(self: @T, __calldata__: felt252);

    #[event]
    fn my_event();
}

//! > generated_cairo_code
lib.cairo:

#[starknet::interface]
trait IContract<T> {
    fn get_something(ref self: T, arg: felt252, num: felt252) -> felt252;

    fn empty(self: @T);

    fn bad_sig(ref self: T, ref arg1: felt252, ref arg2: felt252) -> felt252;

    fn bad_sig2(self: @T, __calldata__: felt252);

    #[event]
    fn my_event();
}

IContractDispatcherTrait:

trait IContractDispatcherTrait<T> {
    fn get_something(self: T, arg: felt252, num: felt252) -> felt252;
    fn empty(self: T, );
}

#[derive(Copy, Drop, storage_access::StorageAccess, Serde)]
struct IContractDispatcher {
    contract_address: starknet::ContractAddress,
}

impl IContractDispatcherImpl of IContractDispatcherTrait<IContractDispatcher> {
    fn get_something(self: IContractDispatcher, arg: felt252, num: felt252) -> felt252 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<felt252>::serialize(@arg, ref __calldata__);
        serde::Serde::<felt252>::serialize(@num, ref __calldata__);

        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(
            starknet::call_contract_syscall(
                self.contract_address,
                0x3c52d61651de3dcab6ceaa9f6505f7aed8f1ffc0f694ce2a9ed76e758d87a3,
                array::ArrayTrait::span(@__calldata__),
            )
        );

        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }

    fn empty(self: IContractDispatcher, ) {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(
            starknet::call_contract_syscall(
                self.contract_address,
                0x1fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80,
                array::ArrayTrait::span(@__calldata__),
            )
        );

    }

}

#[derive(Copy, Drop, storage_access::StorageAccess, Serde)]
struct IContractLibraryDispatcher {
    class_hash: starknet::ClassHash,
}

impl IContractLibraryDispatcherImpl of IContractDispatcherTrait<IContractLibraryDispatcher> {
    fn get_something(self: IContractLibraryDispatcher, arg: felt252, num: felt252) -> felt252 {
        let mut __calldata__ = traits::Default::default();
        serde::Serde::<felt252>::serialize(@arg, ref __calldata__);
        serde::Serde::<felt252>::serialize(@num, ref __calldata__);

        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(
            starknet::syscalls::library_call_syscall(
                self.class_hash,
                0x3c52d61651de3dcab6ceaa9f6505f7aed8f1ffc0f694ce2a9ed76e758d87a3,
                array::ArrayTrait::span(@__calldata__),
            )
        );

        option::OptionTrait::expect(
            serde::Serde::<felt252>::deserialize(ref ret_data),
            'Returned data too short',
        )
    }

    fn empty(self: IContractLibraryDispatcher, ) {
        let mut __calldata__ = traits::Default::default();

        let mut ret_data = starknet::SyscallResultTrait::unwrap_syscall(
            starknet::syscalls::library_call_syscall(
                self.class_hash,
                0x1fc3f77ebc090777f567969ad9823cf6334ab888acb385ca72668ec5adbde80,
                array::ArrayTrait::span(@__calldata__),
            )
        );

    }

}


impls:

impl IContractDispatcherCopy<> of Copy::<IContractDispatcher<>>;
impl IContractDispatcherDrop<> of Drop::<IContractDispatcher<>>;
impl IContractDispatcherSerde<> of serde::Serde::<IContractDispatcher<>> {
    fn serialize(self: @IContractDispatcher<>, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.contract_address, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<IContractDispatcher<>> {
        Option::Some(IContractDispatcher {
            contract_address: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


storage_access_impl:

impl StorageAccessIContractDispatcher of starknet::StorageAccess::<IContractDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<IContractDispatcher> {
        let contract_address = starknet::StorageAccess::<starknet::ContractAddress>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            IContractDispatcher {
                contract_address,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: IContractDispatcher) -> starknet::SyscallResult<()> {
        starknet::StorageAccess::<starknet::ContractAddress>::write(address_domain, base, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<IContractDispatcher> {
        let contract_address = starknet::StorageAccess::<starknet::ContractAddress>::read_at_offset_internal(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            IContractDispatcher {
                contract_address,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: IContractDispatcher) -> starknet::SyscallResult<()> {
        starknet::StorageAccess::<starknet::ContractAddress>::write_at_offset_internal(address_domain, base, offset, value.contract_address)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size_internal(value: IContractDispatcher) -> u8 {
        starknet::StorageAccess::<starknet::ContractAddress>::size_internal(value.contract_address)
    }
}

impls:

impl IContractLibraryDispatcherCopy<> of Copy::<IContractLibraryDispatcher<>>;
impl IContractLibraryDispatcherDrop<> of Drop::<IContractLibraryDispatcher<>>;
impl IContractLibraryDispatcherSerde<> of serde::Serde::<IContractLibraryDispatcher<>> {
    fn serialize(self: @IContractLibraryDispatcher<>, ref output: array::Array<felt252>) {
        serde::Serde::serialize(self.class_hash, ref output)
    }
    fn deserialize(ref serialized: array::Span<felt252>) -> Option<IContractLibraryDispatcher<>> {
        Option::Some(IContractLibraryDispatcher {
            class_hash: serde::Serde::deserialize(ref serialized)?,
        })
    }
}


storage_access_impl:

impl StorageAccessIContractLibraryDispatcher of starknet::StorageAccess::<IContractLibraryDispatcher> {
    fn read(address_domain: u32, base: starknet::StorageBaseAddress) -> starknet::SyscallResult<IContractLibraryDispatcher> {
        let class_hash = starknet::StorageAccess::<starknet::ClassHash>::read(address_domain, base)?;
        starknet::SyscallResult::Ok(
            IContractLibraryDispatcher {
                class_hash,
            }
        )
    }
    fn write(address_domain: u32, base: starknet::StorageBaseAddress, value: IContractLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::StorageAccess::<starknet::ClassHash>::write(address_domain, base, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    fn read_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8) -> starknet::SyscallResult<IContractLibraryDispatcher> {
        let class_hash = starknet::StorageAccess::<starknet::ClassHash>::read_at_offset_internal(address_domain, base, offset)?;
        starknet::SyscallResult::Ok(
            IContractLibraryDispatcher {
                class_hash,
            }
        )
    }
    #[inline(always)]
    fn write_at_offset_internal(address_domain: u32, base: starknet::StorageBaseAddress, offset: u8, value: IContractLibraryDispatcher) -> starknet::SyscallResult<()> {
        starknet::StorageAccess::<starknet::ClassHash>::write_at_offset_internal(address_domain, base, offset, value.class_hash)?;
        starknet::SyscallResult::Ok(())
    }
    #[inline(always)]
    fn size_internal(value: IContractLibraryDispatcher) -> u8 {
        starknet::StorageAccess::<starknet::ClassHash>::size_internal(value.class_hash)
    }
}

//! > expected_diagnostics
error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> lib.cairo:26:34
        Option::Some(*serialized.pop_front()? != 0)
                                 ^*******^

error: Desnap operator can only be applied on snapshots
 --> lib.cairo:26:22
        Option::Some(*serialized.pop_front()? != 0)
                     ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> lib.cairo:103:34
        Option::Some(*serialized.pop_front()?)
                                 ^*******^

error: Desnap operator can only be applied on snapshots
 --> lib.cairo:103:22
        Option::Some(*serialized.pop_front()?)
                     ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> option.cairo:20:35
        let variant = *serialized.pop_front()?;
                                  ^*******^

error: Desnap operator can only be applied on snapshots
 --> option.cairo:20:23
        let variant = *serialized.pop_front()?;
                      ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:21:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:21:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:288:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:288:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u8>` has multiple implementations, in: "core::integer::U32TryIntoU8", "core::integer::Felt252TryIntoU8", "core::integer::U16TryIntoU8", "core::integer::U128TryIntoU8", "core::integer::U64TryIntoU8"
 --> integer.cairo:288:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:463:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:463:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u16>` has multiple implementations, in: "core::integer::U128TryIntoU16", "core::integer::U64TryIntoU16", "core::integer::U32TryIntoU16", "core::integer::Felt252TryIntoU16"
 --> integer.cairo:463:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:639:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:639:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u32>` has multiple implementations, in: "core::integer::U64TryIntoU32", "core::integer::Felt252TryIntoU32", "core::integer::U128TryIntoU32"
 --> integer.cairo:639:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^

error: Method `pop_front` not found on type "core::array::Span::<core::felt252>". Did you import the correct trait and impl?
 --> integer.cairo:815:36
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                   ^*******^

error: Desnap operator can only be applied on snapshots
 --> integer.cairo:815:24
        Option::Some(((*serialized.pop_front()?).try_into())?)
                       ^

error: Trait `core::traits::TryInto::<<missing>, core::integer::u64>` has multiple implementations, in: "core::integer::Felt252TryIntoU64", "core::integer::U128TryIntoU64"
 --> integer.cairo:815:50
        Option::Some(((*serialized.pop_front()?).try_into())?)
                                                 ^******^

error: Plugin diagnostic: `ref` parameters are not supported in the ABI of a contract.
 --> lib.cairo:7:29
    fn bad_sig(ref self: T, ref arg1: felt252, ref arg2: felt252) -> felt252;
                            ^*^

error: Plugin diagnostic: `ref` parameters are not supported in the ABI of a contract.
 --> lib.cairo:7:48
    fn bad_sig(ref self: T, ref arg1: felt252, ref arg2: felt252) -> felt252;
                                               ^*^

error: Plugin diagnostic: Parameter name `__calldata__` cannot be used.
 --> lib.cairo:9:27
    fn bad_sig2(self: @T, __calldata__: felt252);
                          ^**********^
